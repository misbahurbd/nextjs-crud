generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TodoStatus {
  Pending
  Complete
}

model User {
  id        String    @id @default(uuid()) @map("_id")
  username  String    @unique
  email     String    @unique
  name      String
  password  String
  profile   Profile?
  todos     Todo[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Todo {
  id           String           @id @default(uuid()) @map("_id")
  title        String
  description  String?
  status       TodoStatus       @default(Pending)
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  technologies TodoTechnology[]
  comments     Comment[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Comment {
  id        String    @id @default(uuid()) @map("_id")
  message   String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  todoId    String
  todo      Todo      @relation(fields: [todoId], references: [id], onDelete: Cascade)
  parentId  String?
  parent    Comment?  @relation("commentsParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  comments  Comment[] @relation("commentsParent")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Technology {
  id          String           @id @default(uuid()) @map("_id")
  title       String
  description String?
  todos       TodoTechnology[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model TodoTechnology {
  id     String     @id @default(uuid()) @map("_id")
  todoId String
  todo   Todo       @relation(fields: [todoId], references: [id])
  techId String
  tech   Technology @relation(fields: [techId], references: [id])
}

model Profile {
  id          String    @id @default(uuid()) @map("_id")
  name        String
  email       String    @unique
  username    String    @unique
  profileImg  String?
  bannerImg   String?
  bio         String?
  dateOfBirth DateTime?
  mobile      String?
  location    String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
